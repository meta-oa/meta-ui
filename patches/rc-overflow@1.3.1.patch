diff --git a/es/Overflow.d.ts b/es/Overflow.d.ts
index 39927d018e8e54d2ec0d8fd2919109a479532269..9ee58a1848b9abd37f688211d2e943821cf53528 100644
--- a/es/Overflow.d.ts
+++ b/es/Overflow.d.ts
@@ -8,6 +8,7 @@ export type { ComponentType } from './RawItem';
 export interface OverflowProps<ItemType> extends React.HTMLAttributes<any> {
     prefixCls?: string;
     className?: string;
+    itemClassName?: string;
     style?: React.CSSProperties;
     data?: ItemType[];
     itemKey?: React.Key | ((item: ItemType) => React.Key);
diff --git a/es/Overflow.js b/es/Overflow.js
index 2766e4ff7d2049b0d985a4ba2ca0c0bb9b7af50f..d1c955558b3a60191a7416fa205a5d3f41e037d3 100644
--- a/es/Overflow.js
+++ b/es/Overflow.js
@@ -2,7 +2,7 @@ import _extends from "@babel/runtime/helpers/esm/extends";
 import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
 import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
 import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
-var _excluded = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
+var _excluded = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "itemClassName", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
 import * as React from 'react';
 import { useState, useMemo, useCallback } from 'react';
 import classNames from 'classnames';
@@ -31,6 +31,7 @@ function Overflow(props, ref) {
     ssr = props.ssr,
     style = props.style,
     className = props.className,
+    itemClassName = props.itemClassName,
     maxCount = props.maxCount,
     renderRest = props.renderRest,
     renderRawRest = props.renderRawRest,
@@ -218,6 +219,7 @@ function Overflow(props, ref) {
   }
   var itemSharedProps = {
     prefixCls: itemPrefixCls,
+    className: itemClassName,
     responsive: shouldResponsive,
     component: itemComponent,
     invalidate: invalidate
diff --git a/lib/Overflow.d.ts b/lib/Overflow.d.ts
index 39927d018e8e54d2ec0d8fd2919109a479532269..9ee58a1848b9abd37f688211d2e943821cf53528 100644
--- a/lib/Overflow.d.ts
+++ b/lib/Overflow.d.ts
@@ -8,6 +8,7 @@ export type { ComponentType } from './RawItem';
 export interface OverflowProps<ItemType> extends React.HTMLAttributes<any> {
     prefixCls?: string;
     className?: string;
+    itemClassName?: string;
     style?: React.CSSProperties;
     data?: ItemType[];
     itemKey?: React.Key | ((item: ItemType) => React.Key);
diff --git a/lib/Overflow.js b/lib/Overflow.js
index 4edba69210dee17e36dab6755866496e75a2d79f..d1ca5b71782adcbcf5aae9a9c50db96bf74a7751 100644
--- a/lib/Overflow.js
+++ b/lib/Overflow.js
@@ -24,7 +24,7 @@ var _Item = _interopRequireDefault(require("./Item"));
 var _useEffectState11 = _interopRequireWildcard(require("./hooks/useEffectState"));
 var _RawItem = _interopRequireDefault(require("./RawItem"));
 var _context = require("./context");
-var _excluded = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
+var _excluded = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "itemClassName", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
 function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
 function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
 var RESPONSIVE = 'responsive';
@@ -45,6 +45,7 @@ function Overflow(props, ref) {
     ssr = props.ssr,
     style = props.style,
     className = props.className,
+    itemClassName = props.className,
     maxCount = props.maxCount,
     renderRest = props.renderRest,
     renderRawRest = props.renderRawRest,
@@ -232,6 +233,7 @@ function Overflow(props, ref) {
   }
   var itemSharedProps = {
     prefixCls: itemPrefixCls,
+    className: itemClassName,
     responsive: shouldResponsive,
     component: itemComponent,
     invalidate: invalidate